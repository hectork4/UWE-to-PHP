[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module controller('http://www.application.org/coreMVC')]

[import services::helperFileReader /]
[import services::helperStringUtil /]
[import services::helperApplication /]
[import files::writeControllerSkeleton /]
[import services::helperCodeigniterPaths /]

[**
 * The documentation of the template generateElement.
 * @param aModel
 */]

[comment]La plantilla utilizada para los modelos y los controladores es la generada por el uso del comando php artisan make:[controller|model] <name> --resource[/comment]


[template public makeControllers(anApp : Application)]
[comment @main/]  
  [let base_dir : String = getBaseDir() ]
   [let path : String = 'CodeIgniter/application/controllers/' + anApp.aPackageController.name + 'Controllers/']
       [self.makeFolder(base_dir + path) /]
       [for (controller : Controller | anApp.aPackageController.controllers)]
        [if (anApp.name.oclIsUndefined() or anApp.name = '')]
			[ writeControllerSkeleton(path, controller, getDefaultAppName('CodeIgniter'), anApp.aPackageModel.name) /]
		[else]
        	[ writeControllerSkeleton(path, controller, anApp.name, anApp.aPackageModel.name) /]
        [/if]
		  [comment][ getViewConstructors(path, controller.name, anApp.aPackageView ) /]
		  [ registerController(controller.name, anApp.aPackageController.name, anApp.aPackageView) /][/comment]
       [/for]
    [/let]
   [/let]
[/template]


[template private getViewConstructors(path : String, controllerName : String, pv : PackageView)]
[file (path + controllerName + 'Controller.php', true, 'UTF-8')]
[for (view : View | pv.views) after ('}')]
	[if (getSuffix(view.name).toString().matches(controllerName))]
    function createView[ view.name /]()
    {
		$this->load->view("[pv.name /]/[view.name /]");
         [comment]return view('[pv.name/]Views.[ view.name /]');[/comment]
    }

	[/if]
[/for]

[/file]
[/template]
